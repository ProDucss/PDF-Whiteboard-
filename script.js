let pdfDoc = null;let pageNum = 1;let canvas = document.getElementById('pdf-canvas');let ctx = canvas.getContext('2d');let originalWidth, originalHeight;// Function to render the page without changing its original sizeasync function renderPage(page) {    let viewport = page.getViewport({ scale: 1 }); // Scale set to 1 for original size    originalWidth = viewport.width;    originalHeight = viewport.height;        canvas.height = originalHeight;    canvas.width = originalWidth;    let renderContext = {        canvasContext: ctx,        viewport: viewport    };    await page.render(renderContext).promise;}// Load the PDF and render the first pageasync function loadPDF(pdfData) {    let loadingTask = pdfjsLib.getDocument(pdfData);    pdfDoc = await loadingTask.promise;    let page = await pdfDoc.getPage(pageNum);    renderPage(page);}// Apply the whiteboard effect (increase brightness/contrast) without altering dimensionsfunction applyWhiteboardEffect() {    let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);    let data = imageData.data;    // Loop through each pixel and adjust brightness/contrast (simple effect)    for (let i = 0; i < data.length; i += 4) {        data[i] = data[i] * 1.2;      // Red        data[i + 1] = data[i + 1] * 1.2;  // Green        data[i + 2] = data[i + 2] * 1.2;  // Blue    }    ctx.putImageData(imageData, 0, 0);}// Handle file input and load the PDFdocument.getElementById('file-input').addEventListener('change', function(event) {    let file = event.target.files[0];    if (file.type === "application/pdf") {        let fileReader = new FileReader();        fileReader.onload = function() {            let typedArray = new Uint8Array(this.result);            loadPDF(typedArray);        };        fileReader.readAsArrayBuffer(file);    }});// Apply the effect and ensure no croppingdocument.getElementById('apply-effect-button').addEventListener('click', function() {    applyWhiteboardEffect();    downloadModifiedPDF();  // Call to download the modified PDF});// Function to download the modified PDF after applying the effectfunction downloadModifiedPDF() {    let newPdf = new jsPDF({        orientation: 'portrait',        unit: 'px',        format: [originalWidth, originalHeight] // Set the size to match the original PDF page size    });        // Convert the canvas back to image and add it to the new PDF    let imgData = canvas.toDataURL('image/jpeg', 1.0);    newPdf.addImage(imgData, 'JPEG', 0, 0, originalWidth, originalHeight);    // Save the newly created PDF    newPdf.save('whiteboard_effect_applied.pdf');}